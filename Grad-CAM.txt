#Grad_CAM implementation on set 
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as c_map
from IPython.display import Image, display
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications.xception import Xception, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import os

# Load the best model
#model_path = 'Fig_weights/Mobilenet.h5'
#model_path = 'Fig_weights/Inception.h5'
model_path = 'Fig_weights/Xception.h5'

model_builder = tf.keras.models.load_model(model_path) 

# Define constants
IMG_SIZE = (299, 299)
#last_conv_layer = "out_relu" # MobileNet model
#last_conv_layer = "mixed10"  #Inception model
last_conv_layer = "block14_sepconv2_act" #Xception model
img_path = 'results/infect/9.jpg'

# Load and preprocess the image
def vectorize_image(img_path, size):
    img = image.load_img(img_path, target_size=size)
    array = image.img_to_array(img)
    array = np.expand_dims(array, axis=0)
    return preprocess_input(array)
    
vectorized_image = vectorize_image(img_path, size=IMG_SIZE)

# Predict the class
model = keras.models.load_model(model_path)
model.layers[-1].activation = None
model_prediction = model.predict(vectorized_image)
predicted_class = np.argmax(model_prediction, axis=-1)
print(f"The predicted class is : {predicted_class}")

# Generate the heatmap
def get_heatmap(vectorized_image, model, last_conv_layer, pred_index=None):
    gradient_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer).output, model.output]
    )

    with tf.GradientTape() as tape:
        last_conv_layer_output, preds = gradient_model(vectorized_image)
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]
    
    grads = tape.gradient(class_channel, last_conv_layer_output)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    last_conv_layer_output = last_conv_layer_output[0]
    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    
    return heatmap.numpy()

heatmap = get_heatmap(vectorized_image, model, last_conv_layer)

# Superimpose the heatmap on the image
def superimpose_gradcam(img_path, heatmap, output_path="results/Grad-CAM/infect/9.jpg", alpha=0.4):
    img = image.load_img(img_path)
    img = image.img_to_array(img)
    
    heatmap = np.uint8(255 * heatmap)
    jet = c_map.get_cmap("jet")
    jet_colors = jet(np.arange(256))[:, :3]
    jet_heatmap = jet_colors[heatmap]
    jet_heatmap = image.array_to_img(jet_heatmap)
    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))
    jet_heatmap = image.img_to_array(jet_heatmap)
    
    superimposed_img = jet_heatmap * alpha + img
    superimposed_img = image.array_to_img(superimposed_img)
    superimposed_img.save(output_path)
    display(Image(output_path))

superimpose_gradcam(img_path, heatmap)

